## import standard libraries for our work

## import standard libraries for our work
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
importing the 'sklearn' library that is used for machine learning
import sklearn
iris is botanical data set that classifies the flowers into a specific species based on some measurementsts. Using 'load_iris' built in fuction loading this data into a Bunch object
from sklearn.datasets import load_iris
iris = load_iris()
type(iris)
sklearn.utils.Bunch
Convert this Bunch data set to Dataframe
data1 = pd.DataFrame(data= np.c_[iris['data'], iris['target']],
                     columns= iris['feature_names'] + ['target'])
data1.shape  #There are 5 features ( columns ) and 150 rows, observations
(150, 5)
data1.head()
sepal length (cm)	sepal width (cm)	petal length (cm)	petal width (cm)	target
0	5.1	3.5	1.4	0.2	0.0
1	4.9	3.0	1.4	0.2	0.0
2	4.7	3.2	1.3	0.2	0.0
3	4.6	3.1	1.5	0.2	0.0
4	5.0	3.6	1.4	0.2	0.0
data1['target'].value_counts()
### There are basically 3 types of categories 0 means setosa, 1 means versicolor, and 2 means virginica
2.0    50
1.0    50
0.0    50
Name: target, dtype: int64
Add a column 'Species' to the Dataset with this classification
def categorize(a):
    if a == 0.0:
        return('setosa')
    if a == 1.0:
        return('versicolor')
    return('virginica')
data1['Species'] = data1['target'].apply(categorize)
    
data1.head()
sepal length (cm)	sepal width (cm)	petal length (cm)	petal width (cm)	target	Species
0	5.1	3.5	1.4	0.2	0.0	setosa
1	4.9	3.0	1.4	0.2	0.0	setosa
2	4.7	3.2	1.3	0.2	0.0	setosa
3	4.6	3.1	1.5	0.2	0.0	setosa
4	5.0	3.6	1.4	0.2	0.0	setosa
Plot the data and classfications to see data has a classification
plt.figure(figsize=[18,8])
plt.scatter(data1['Species'], data1['sepal length (cm)'],  marker= 'o')
plt.scatter(data1['Species'], data1['sepal width (cm)'], marker= 'x')
plt.scatter(data1['Species'], data1['petal width (cm)'], marker= '*')
plt.scatter(data1['Species'], data1['petal length (cm)'], marker= ',')
plt.ylabel('Length in cm')
plt.legend()
plt.xlabel('Species Name')
plt.show()

plt.figure(figsize=[18,8])
plt.plot(data1['sepal length (cm)'], marker= 'o')
plt.plot(data1['sepal width (cm)'], marker= 'x')
plt.plot(data1['petal length (cm)'], marker= '*')
plt.plot(data1['petal width (cm)'], marker= ',')
plt.ylabel('Length in cm')
plt.legend()
plt.show()

sns.jointplot(data1['sepal length (cm)'], data1['sepal width (cm)'], size= 13, kind = 'kde')
<seaborn.axisgrid.JointGrid at 0x7f9643db73c8>

sns.jointplot(data1['petal length (cm)'], data1['petal width (cm)'], size= 13, kind = 'kde')
<seaborn.axisgrid.JointGrid at 0x7f9643db7e80>

From the above plots , there appears a grouping trend of data elements.
Objective of this machine learning exercise :
The flower based on its physical measurements, is classfied into a specifc species . It means, there is relation ship between the physical measurements and the species. We need to establish a model / Method through which for a given measurements we should be able to clasify the species. From the given dataset, machine learning happens to define the relationship and a model is built with which we can predict the species.
Steps Involved
  #1. Split the given data into two sets - Train Data, Test Data
  #2. Plot the data for visual inspections.
  #3. Building K- Nearest neighbour classifier model
For Machine learning purpose the data is split into two portions Train data, Test Data
### It is a standard convention to name X_train in capital X and y_train in small letters. 
###  All the measurements (features) are considered as X and the Species is considered as y
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(data1[['sepal length (cm)','sepal width (cm)','petal length (cm)','petal width (cm)']], data1['Species'], random_state=0 )
X_train.head()
sepal length (cm)	sepal width (cm)	petal length (cm)	petal width (cm)
61	5.9	3.0	4.2	1.5
92	5.8	2.6	4.0	1.2
112	6.8	3.0	5.5	2.1
2	4.7	3.2	1.3	0.2
141	6.9	3.1	5.1	2.3
y_train.head()
61     versicolor
92     versicolor
112     virginica
2          setosa
141     virginica
Name: Species, dtype: object
X_test.head()
sepal length (cm)	sepal width (cm)	petal length (cm)	petal width (cm)
114	5.8	2.8	5.1	2.4
62	6.0	2.2	4.0	1.0
33	5.5	4.2	1.4	0.2
107	7.3	2.9	6.3	1.8
7	5.0	3.4	1.5	0.2
y_test.head()
114     virginica
62     versicolor
33         setosa
107     virginica
7          setosa
Name: Species, dtype: object
K-Nearest Neighbours Model
### for a test data set ( In this case the measurements of the flower 4 values ) classifying the data to nearest data point       and identify the species 
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train) # This is fitting the model  with the training data. 
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
prediction = knn.predict(X_test) # By supplying the test data now predicting the  Y (Species values)
prediction
array(['virginica', 'versicolor', 'setosa', 'virginica', 'setosa',
       'virginica', 'setosa', 'versicolor', 'versicolor', 'versicolor',
       'virginica', 'versicolor', 'versicolor', 'versicolor', 'versicolor',
       'setosa', 'versicolor', 'versicolor', 'setosa', 'setosa',
       'virginica', 'versicolor', 'setosa', 'setosa', 'virginica',
       'setosa', 'setosa', 'versicolor', 'versicolor', 'setosa',
       'virginica', 'versicolor', 'setosa', 'virginica', 'virginica',
       'versicolor', 'setosa', 'virginica'], dtype=object)
y_test + "  " +  prediction #
#Comparision of the predicted data from the Test sent and the y_test data
# Predicted data and the y_test data are same. This gives the highest confidence level on the model built
114      virginica  virginica
62     versicolor  versicolor
33             setosa  setosa
107      virginica  virginica
7              setosa  setosa
100      virginica  virginica
40             setosa  setosa
86     versicolor  versicolor
76     versicolor  versicolor
71     versicolor  versicolor
134      virginica  virginica
51     versicolor  versicolor
73     versicolor  versicolor
54     versicolor  versicolor
63     versicolor  versicolor
37             setosa  setosa
78     versicolor  versicolor
90     versicolor  versicolor
45             setosa  setosa
16             setosa  setosa
121      virginica  virginica
66     versicolor  versicolor
24             setosa  setosa
8              setosa  setosa
126      virginica  virginica
22             setosa  setosa
44             setosa  setosa
97     versicolor  versicolor
93     versicolor  versicolor
26             setosa  setosa
137      virginica  virginica
84     versicolor  versicolor
27             setosa  setosa
127      virginica  virginica
132      virginica  virginica
59     versicolor  versicolor
18             setosa  setosa
83      versicolor  virginica
Name: Species, dtype: object
### Now we can test the model using any data and it would be accurate 
Testing the model with some test data
X_new = np.array([[5, 2.9, 1, 0.2]])
predection1 = knn.predict(X_new)
predection1
array(['setosa'], dtype=object)